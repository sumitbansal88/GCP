export my_zone=us-central1-a
export my_cluster=standard-cluster-1


source <(kubectl completion bash)


gcloud container clusters get-credentials $my_cluster --zone $my_zone


git clone https://github.com/GoogleCloudPlatform/training-data-analyst


ln -s ~/training-data-analyst/courses/ak8s/v1.1 ~/ak8s


cd ~/ak8s/Deployments/


apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx:1.7.9
        ports:
        - containerPort: 80


kubectl apply -f ./nginx-deployment.yaml

kubectl get deployments

kubectl scale --replicas=3 deployment nginx-deployment

kubectl set image deployment.v1.apps/nginx-deployment nginx=nginx:1.9.1 --record


kubectl rollout status deployment.v1.apps/nginx-deployment


kubectl rollout history deployment nginx-deployment


kubectl rollout undo deployments nginx-deployment


kubectl rollout history deployment nginx-deployment


kubectl rollout history deployment/nginx-deployment --revision=3


apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  type: LoadBalancer
  selector:
    app: nginx
  ports:
  - protocol: TCP
    port: 60000
    targetPort: 80


kubectl apply -f ./service-nginx.yaml

This manifest defines a service and applies it to Pods that correspond to the selector. In this case, the manifest is applied to the nginx container that you deployed in task 1. This service also applies to any other Pods with the app: nginx label, including any that are created after the servic


kubectl get service nginx


http://[EXTERNAL_IP]:60000/


apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-canary
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
        track: canary
        Version: 1.9.1
    spec:
      containers:
      - name: nginx
        image: nginx:1.9.1
        ports:
        - containerPort: 80


kubectl apply -f nginx-canary.yaml


kubectl get deployments


kubectl scale --replicas=0 deployment nginx-deployment


kubectl get deployments


apiVersion: v1
kind: Service
metadata:
  name: nginx
spec:
  type: LoadBalancer
  sessionAffinity: ClientIP
  selector:
    app: nginx
  ports:
  - protocol: TCP
    port: 60000
    targetPort: 80



